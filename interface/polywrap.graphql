"""
Response: Represents the server's response to an HTTP request.
"""
type Response {
    """
    status: HTTP status code of the response.
    """
    status: Int!

    """
    statusText: The text phrase corresponding to the status code.
    """
    statusText: String!

    """
    headers: HTTP headers in the response.
    """
    headers: Map @annotate(type: "Map<String!, String!>")

    """
    body: The body of the response, if any.
    """
    body: String
}

"""
Request: Represents an HTTP request to be sent to a server.
"""
type Request {
    """
    The request destination
    """
    url: String!,

    """
    The HTTP request method to use
    """
    method: HTTPMethod!,

    """
    HTTP headers to be included in the request.
    """
    headers: Map @annotate(type: "Map<String!, String!>")

    """
    The body of the request, if any.
    """
    body: String

    """
    Timeout for the request in milliseconds. If not set, the request will not timeout.
    """
    timeout: Int
}

"""
Specifies the HTTP method to be used when making the request.
"""
enum HTTPMethod {
    """
    The HTTP GET method requests a representation of the specified resource.
    """
    GET

    """
    The HTTP POST method sends data to the server to create a new resource.
    """
    POST

    """
    The HTTP PUT method updates a current resource with new data.
    """
    PUT

    """
    The HTTP DELETE method deletes the specified resource.
    """
    DELETE

    """
    The HTTP HEAD method asks for a response identical to that of a GET request, but without the response body.
    """
    HEAD

    """
    The HTTP PATCH method is used to apply partial modifications to a resource.
    """
    PATCH

    """
    The HTTP OPTIONS method describes the communication options for the target resource.
    """
    OPTIONS

    """
    The HTTP CONNECT method is used by the client to establish a network connection to a web resource via HTTP, usually to facilitate HTTPS-secured communication (SSL Tunneling).
    """
    CONNECT

    """
    The HTTP TRACE method performs a message loop-back test along the path to the target resource, providing a useful diagnostic tool for seeing what's being received at the other end.
    """
    TRACE
}

type Module {
    """
    Send an HTTP Request to the specified URL using the specified method.
    """
    request(request: Request): Response
}
