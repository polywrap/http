"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import List, Optional, Union
from pydantic import BaseModel

class Version(Enum):
    """
    WRAP Standard Version
    """
    VERSION_0_1_0 = ...
    VERSION_0_1 = ...


class Type(Enum):
    """
    Wrapper Package Type
    """
    WASM = ...
    INTERFACE = ...
    PLUGIN = ...


class Env(BaseModel):
    required: Optional[bool] = ...


class GetImplementations(BaseModel):
    enabled: bool
    ...


class CapabilityDefinition(BaseModel):
    get_implementations: Optional[GetImplementations] = ...


class ImportedDefinition(BaseModel):
    uri: str
    namespace: str
    native_type: str = ...


class WithKind(BaseModel):
    kind: float
    ...


class WithComment(BaseModel):
    comment: Optional[str] = ...


class GenericDefinition(WithKind):
    type: Union[str, Enum, None]
    name: Optional[str] = ...
    required: Optional[bool] = ...


class ScalarType(Enum):
    U_INT = ...
    U_INT8 = ...
    U_INT16 = ...
    U_INT32 = ...
    INT = ...
    INT8 = ...
    INT16 = ...
    INT32 = ...
    STRING = ...
    BOOLEAN = ...
    BYTES = ...
    BIG_INT = ...
    BIG_NUMBER = ...
    JSON = ...


class ScalarDefinition(GenericDefinition):
    type: ScalarType
    ...


class MapKeyType(Enum):
    U_INT = ...
    U_INT8 = ...
    U_INT16 = ...
    U_INT32 = ...
    INT = ...
    INT8 = ...
    INT16 = ...
    INT32 = ...
    STRING = ...


class ObjectRef(GenericDefinition):
    ...


class EnumRef(GenericDefinition):
    ...


class UnresolvedObjectOrEnumRef(GenericDefinition):
    ...


class ImportedModuleRef(BaseModel):
    type: Optional[str] = ...


class InterfaceImplementedDefinition(GenericDefinition):
    ...


class EnumDefinition(GenericDefinition, WithComment):
    constants: Optional[List[str]] = ...


class InterfaceDefinition(GenericDefinition, ImportedDefinition):
    capabilities: Optional[CapabilityDefinition] = ...


class ImportedEnumDefinition(EnumDefinition, ImportedDefinition):
    ...


class WrapManifest(BaseModel):
    class Config:
        extra = ...
    
    
    version: Version = ...
    type: Type = ...
    name: str = ...
    abi: Abi = ...


class Abi(BaseModel):
    version: Optional[str] = ...
    object_types: Optional[List[ObjectDefinition]] = ...
    module_type: Optional[ModuleDefinition] = ...
    enum_types: Optional[List[EnumDefinition]] = ...
    interface_types: Optional[List[InterfaceDefinition]] = ...
    imported_object_types: Optional[List[ImportedObjectDefinition]] = ...
    imported_module_types: Optional[List[ImportedModuleDefinition]] = ...
    imported_enum_types: Optional[List[ImportedEnumDefinition]] = ...
    imported_env_types: Optional[List[ImportedEnvDefinition]] = ...
    env_type: Optional[EnvDefinition] = ...


class ObjectDefinition(GenericDefinition, WithComment):
    properties: Optional[List[PropertyDefinition]] = ...
    interfaces: Optional[List[InterfaceImplementedDefinition]] = ...


class ModuleDefinition(GenericDefinition, WithComment):
    methods: Optional[List[MethodDefinition]] = ...
    imports: Optional[List[ImportedModuleRef]] = ...
    interfaces: Optional[List[InterfaceImplementedDefinition]] = ...


class MethodDefinition(GenericDefinition, WithComment):
    arguments: Optional[List[PropertyDefinition]] = ...
    env: Optional[Env] = ...
    return_: Optional[PropertyDefinition] = ...


class ImportedModuleDefinition(GenericDefinition, ImportedDefinition, WithComment):
    methods: Optional[List[MethodDefinition]] = ...
    is_interface: Optional[bool] = ...


class AnyDefinition(GenericDefinition):
    array: Optional[ArrayDefinition] = ...
    scalar: Optional[ScalarDefinition] = ...
    map: Optional[MapDefinition] = ...
    object: Optional[ObjectRef] = ...
    enum: Optional[EnumRef] = ...
    unresolved_object_or_enum: Optional[UnresolvedObjectOrEnumRef] = ...


class EnvDefinition(ObjectDefinition):
    ...


class ImportedObjectDefinition(ObjectDefinition, ImportedDefinition, WithComment):
    ...


class PropertyDefinition(WithComment, AnyDefinition):
    ...


class ArrayDefinition(AnyDefinition):
    item: Optional[GenericDefinition] = ...


class MapKeyDefinition(AnyDefinition):
    type: Optional[MapKeyType] = ...


class MapDefinition(AnyDefinition, WithComment):
    key: Optional[MapKeyDefinition] = ...
    value: Optional[GenericDefinition] = ...


class ImportedEnvDefinition(ImportedObjectDefinition):
    ...


